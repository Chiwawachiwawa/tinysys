/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/advancedsearchbar/searchBarSuggest.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ts-debounce/dist/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/ts-debounce/dist/src/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.debounce=function(i,e,o){var t;return void 0===e&&(e=50),void 0===o&&(o={isImmediate:!1}),function(){for(var a=[],d=0;d<arguments.length;d++)a[d]=arguments[d];var n=this,m=o.isImmediate&&void 0===t;void 0!==t&&clearTimeout(t),t=setTimeout(function(){t=void 0,o.isImmediate||i.apply(n,a)},e),m&&i.apply(n,a)}};
//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./src/advancedsearchbar/searchBarSuggest.ts":
/*!***************************************************!*\
  !*** ./src/advancedsearchbar/searchBarSuggest.ts ***!
  \***************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ts_debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ts-debounce */ "./node_modules/ts-debounce/dist/src/index.js");
/* harmony import */ var ts_debounce__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ts_debounce__WEBPACK_IMPORTED_MODULE_0__);

var winEx = window;
function escapeRegExp(literal) {
    return literal.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
function highlightQueryText(query, result) {
    var highlighted = result.replace(new RegExp(escapeRegExp(query), "gi"), function (match) { return "<span class='search__highlight'>" + match + "</span>"; });
    return highlighted;
}
function renderListSection(columns, className) {
    var list = document.createElement("ul");
    list.className = className;
    var listItem = document.createElement("li");
    listItem.className = "search__group-title";
    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        var titleDiv = document.createElement("div");
        titleDiv.innerHTML = col;
        listItem.appendChild(titleDiv);
    }
    list.appendChild(listItem);
    return list;
}
function renderListContent(url, columns, query) {
    var listItem = document.createElement("li");
    var anchor = document.createElement("a");
    anchor.href = url;
    for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
        var col = columns_2[_i];
        var partDiv = document.createElement("div");
        partDiv.innerHTML = highlightQueryText(query, col);
        anchor.appendChild(partDiv);
    }
    listItem.appendChild(anchor);
    return listItem;
}
function renderParts(section, query) {
    if (advSearch) {
        var list = renderListSection([advSearch.ManufacturerPartNumberTitle, advSearch.DigiKeyPartNumberTitle], "search__suggestions--part-number");
        // Part number results
        for (var _i = 0, _a = section.options; _i < _a.length; _i++) {
            var option = _a[_i];
            var product = option;
            var listItem = renderListContent(product.navigationUrl, [product.manufacturerProductNumber, product.digiKeyProductNumber], query);
            list.appendChild(listItem);
        }
        return list;
    }
    return null;
}
function renderCategories(section, query) {
    if (advSearch) {
        var list = renderListSection([advSearch.CategoryTitle], "search__suggestions");
        // Categories
        for (var _i = 0, _a = section.options; _i < _a.length; _i++) {
            var option = _a[_i];
            var cat = option;
            var listItem = renderListContent(cat.navigationUrl, [cat.category], query);
            list.appendChild(listItem);
        }
        return list;
    }
    return null;
}
function renderSuggestions(root, query, sections) {
    // Clear current suggestions
    root.innerHTML = "";
    // Only care about products and categories for now
    var products, categories = null;
    for (var _i = 0, sections_1 = sections; _i < sections_1.length; _i++) {
        var section = sections_1[_i];
        if (section.id === "PRODUCTS") {
            products = renderParts(section, query);
        }
        if (section.id === "CATEGORIES") {
            categories = renderCategories(section, query);
        }
    }
    // Append products first
    if (products) {
        root.appendChild(products);
    }
    if (categories) {
        root.appendChild(categories);
    }
}
function convertData(data) {
    var res = [
        { id: 'CATEGORIES', options: data.suggestedCategories },
        { id: 'MANUFACTURERS', options: data.suggestedManufacturers },
        { id: 'PRODUCTS', options: data.suggestedProductNumbers },
        { id: 'ARTICLES', options: data.suggestedArticles }
    ];
    return res.filter(function (s) { return (s.options && s.options.length); });
}
function buildSuggestionPane(root, query) {
    if (query.length > 2 && query.length <= 50) {
        var request = new XMLHttpRequest();
        var lang = window.__headerData.lang;
        if (!lang) {
            lang = "en";
        }
        var fetchUrl = advSearch.SuggestionUrl + "?keywordPrefix=" + encodeURIComponent(query) + "&maxSuggestions=5";
        request.open('GET', fetchUrl, true);
        request.setRequestHeader("x-Currency", winEx.__headerData.cur);
        request.setRequestHeader("site", winEx.__headerData.site);
        request.setRequestHeader("lang", winEx.__headerData.lang);
        var suggestions_1 = null;
        request.onreadystatechange = function () {
            if (this.readyState === 4) {
                if (this.status >= 200 && this.status < 400) {
                    suggestions_1 = convertData(JSON.parse(this.responseText));
                    if (suggestions_1 != null) {
                        renderSuggestions(root, query, suggestions_1);
                    }
                }
            }
        };
        request.send();
    }
}
function hideSuggestionPane(searchBox) {
    var root = searchBox.parentElement;
    if (root) {
        var suggestionPane = root.querySelector('#suggested-search');
        if (suggestionPane) {
            suggestionPane.className = "";
            suggestionPane.innerHTML = "";
        }
    }
}
function showSuggestionPane(searchBox) {
    var root = searchBox.parentElement;
    if (root) {
        var suggestionPane = root.querySelector('#suggested-search');
        if (suggestionPane) {
            suggestionPane.className = "active";
            buildSuggestionPane(root.querySelector('.active'), searchBox.value);
        }
    }
}
var debouncedShowSuggestions = Object(ts_debounce__WEBPACK_IMPORTED_MODULE_0__["debounce"])(showSuggestionPane, 500);
function searchBarModule() {
    var searchBars = document.querySelectorAll('.header__searchbar');
    for (var i = 0; i < searchBars.length; i++) {
        (function () {
            var ImageButton = document.querySelectorAll('.search-button')[i];
            var TextBoxInput = document.querySelectorAll('.search-textbox')[i];
            var DropDownList = document.querySelectorAll('.search-product-categories')[i];
            if (searchOptions && DropDownList.options.length === 0) {
                var searchOptionsLength = searchOptions.length;
                for (var j = 0; j < searchOptionsLength; j++) {
                    var option = document.createElement("option");
                    option.text = searchOptions[j].Text;
                    option.value = searchOptions[j].Value;
                    if (searchOptions[j].IsSelected) {
                        option.selected = true;
                    }
                    option.setAttribute("data-name", searchOptions[j].DataName);
                    DropDownList.appendChild(option);
                }
                if (searchOptionsLength < 2) {
                    DropDownList.disabled = true;
                }
            }
            function doHpSearch(e) {
                e.preventDefault();
                var SelectedValue = DropDownList.options[DropDownList.selectedIndex].value;
                SelectedValue = SelectedValue.replace('{0}', encodeURIComponent(TextBoxInput.value));
                // Add utag value to get picked up on Firefox
                if (typeof utag !== "undefined" && typeof utag.dkCookie !== "undefined") {
                    utag.dkCookie("ref_page_event=Initiate Search");
                }
                window.location.href = window.location.protocol + '//' + window.location.hostname + SelectedValue;
            }
            function keypressDoHpSearch(e) {
                if (e.keyCode === 13) {
                    doHpSearch(e);
                }
                if (DropDownList.selectedIndex === 0) {
                    if (TextBoxInput.value.length > 2) {
                        debouncedShowSuggestions(TextBoxInput);
                    }
                    else {
                        hideSuggestionPane(TextBoxInput);
                    }
                }
            }
            function searchSuggestionHide(ev) {
                if (ev.target instanceof Element && !checkAncestorForTargetID(ev.target, 'suggested-search')) {
                    hideSuggestionPane(TextBoxInput);
                }
            }
            function checkAncestorForTargetID(el, id) {
                var element = document.querySelector("#" + id);
                if (!element) {
                    return null;
                }
                if (el === element) {
                    return el;
                }
                var ancestor = el.parentElement;
                while (ancestor != null) {
                    if (ancestor.id != null && ancestor.id === id) {
                        return ancestor;
                    }
                    ancestor = ancestor.parentElement;
                }
                return null;
            }
            ImageButton.addEventListener('click', doHpSearch, false);
            TextBoxInput.addEventListener('keyup', keypressDoHpSearch, false);
            window.addEventListener('click', searchSuggestionHide, false);
        }());
    }
}
;
winEx.searchBarModule = searchBarModule;


/***/ })

/******/ });
//# sourceMappingURL=searchbarsuggest.js.map